#calculate median graph edit distance
for(i in 1:(total_graphs-5))
median_ged[i] = calculate_ged(as.numeric(set_median_graph[i]),(i+5))
median_ged_x = seq(from = 5, to = total_graphs-1, by = 1)
med_median_ged = median(as.numeric(median_ged))
sd_median_ged = sd(as.numeric(median_ged))
upper_thres = med_median_ged + 2*sd_median_ged
lower_thres = med_median_ged - 2*sd_median_ged
#write to output file
sink("./output/median_ged_outfile.txt")
cat(upper_thres)
cat(" ")
cat(lower_thres)
for(i in 1:(total_graphs-5)){
cat("\n")
cat(i)
cat(" ")
cat(paste(median_ged[i]))
}
sink()
#png("./plots/median_ged.#png")
dev.off()
plot(median_ged_x,median_ged,type="l",xlab="days", ylab="median graph edit distance")
abline(h=upper_thres,col="red",lty=2)
abline(h=lower_thres,col="red",lty=2)
title(main="Median Graph Edit distance", col.main="blue")
##########################################################################################################################
###########################                     ENTROPY                                          #########################
##########################################################################################################################
entropy<-function(i)
{
normweight = 1/no_edges[[i]];
currGraphEntropy = -(no_edges[[i]])*(normweight - log(normweight));
}
entropy_distance = c();
for(i in 1:(total_graphs-1))
entropy_distance[i] = entropy(i) - entropy(i+1)
entropy_distance[is.nan(entropy_distance)] = 0
median_entropy_x = seq(from = 1, to = (total_graphs-1), by = 1)
med_entropy_distance = median(entropy_distance)
sd_entropy_distance = sd(entropy_distance)
upper_thres = med_entropy_distance + 2*sd_entropy_distance
lower_thres = med_entropy_distance - 2*sd_entropy_distance
#write to output file
sink("./output/entropy_outfile.txt")
cat(upper_thres)
cat(" ")
cat(lower_thres)
for(i in 1:(total_graphs)){
cat("\n")
cat(i)
cat(" ")
cat(paste(entropy_distance[i]))
}
sink()
#png("./plots/entropy.#png")
dev.off()
plot(ged_x,ged,type="l",xlab="days", ylab="Entropy distance")
abline(h=upper_thres,col="red",lty=2)
abline(h=lower_thres,col="red",lty=2)
title(main="Entropy distance", col.main="blue")
##########################################################################################################################
###########################                     SPECTRAL DISTANCE                                #########################
##########################################################################################################################
spectralDistance<-function()
{
prevGraphEigenValues = c();
currGraphEigenValues = rep(0,5);
distance = rep(0,total_graphs);
k=3;#consider k largest eigen values
for(i in 1:total_graphs)
{
g_laplacian = graph.laplacian(graph[[i]]);
if(nrow(g_laplacian) > 0)#sometimes the graph laplacian is zero length?
{
if(dirname == "enron")
{
eigvalues = eigen(g_laplacian, only.values=TRUE)$values;
currGraphEigenValues = eigvalues[1:k];
}
else
{
func <- function(x, extra=NULL) { as.vector(g_laplacian %*% x) };
currGraphEigenValues = arpack(func, options=list(n=vcount(graph[[i]]), nev=k,
ncv=8, which="LM", maxiter=200))$values
}
if (length(prevGraphEigenValues) == k)#ignore the first one
{
sumdiffsq  = 0;
sumcurrsq = 0;
sumprevsq = 0;
minsq = 0;
for(j in 1:k)
{
sumdiffsq = sumdiffsq + (abs(currGraphEigenValues[j]) - abs(prevGraphEigenValues[j]))^2;
sumcurrsq = sumcurrsq + abs(currGraphEigenValues[j])^2;
sumprevsq = sumprevsq + abs(prevGraphEigenValues[j])^2;
}
minsq = min(sumcurrsq , sumprevsq);
#cat("Minsq: ", minsq);
distance[i] = (sumdiffsq/minsq)^0.5;
#print(distance[i]);
}
prevGraphEigenValues = currGraphEigenValues;
currGraphEigenValues = rep(0,5);
#print(i)
}
}
return(distance)
}
spectral_distance <- spectralDistance()
spectral_distance[is.nan(spectral_distance)] = 0
spectral_distance_x = seq(from = 1, to = (total_graphs-1), by = 1)
med_spectral_distance = median(spectral_distance)
sd_spectral_distance= sd(spectral_distance)
upper_thres = med_spectral_distance + 2*sd_spectral_distance
lower_thres = med_spectral_distance - 2*sd_spectral_distance
#write to output file
sink("./output/spectral_distance_outfile.txt")
cat(upper_thres)
cat(" ")
cat(lower_thres)
for(i in 1:(total_graphs)){
cat("\n")
cat(i)
cat(" ")
cat(paste(spectral_distance[i]))
}
sink()
#png("./plots/entropy.#png")
dev.off()
plot(ged_x,ged,type="l",xlab="days", ylab="Spectral distance")
abline(h=upper_thres,col="red",lty=2)
abline(h=lower_thres,col="red",lty=2)
title(main="Spectral distance", col.main="blue")
plot(spectral_distance_x,spectral_distance,type="l",xlab="days", ylab="Spectral distance")
abline(h=upper_thres,col="red",lty=2)
abline(h=lower_thres,col="red",lty=2)
title(main="Spectral distance", col.main="blue")
spectral_distance <- spectralDistance()
spectral_distance[is.nan(spectral_distance)] = 0
spectral_distance_x = seq(from = 1, to = (total_graphs), by = 1)
med_spectral_distance = median(spectral_distance)
sd_spectral_distance= sd(spectral_distance)
upper_thres = med_spectral_distance + 2*sd_spectral_distance
lower_thres = med_spectral_distance - 2*sd_spectral_distance
#write to output file
sink("./output/spectral_distance_outfile.txt")
cat(upper_thres)
cat(" ")
cat(lower_thres)
for(i in 1:(total_graphs)){
cat("\n")
cat(i)
cat(" ")
cat(paste(spectral_distance[i]))
}
sink()
#png("./plots/entropy.#png")
dev.off()
plot(spectral_distance_x,spectral_distance,type="l",xlab="days", ylab="Spectral distance")
abline(h=upper_thres,col="red",lty=2)
abline(h=lower_thres,col="red",lty=2)
title(main="Spectral distance", col.main="blue")
fix(spectral_distance)
spectral_distance[is.nan(spectral_distance)] = 0
fix(spectral_distance)
fix(spectral_distance)
spectral_distance - list()
spectral_distance <- spectralDistance()
spectral_distance[is.nan(spectral_distance)] = 0
spectral_distance_x = seq(from = 1, to = (total_graphs), by = 1)
med_spectral_distance = median(spectral_distance)
sd_spectral_distance= sd(spectral_distance)
upper_thres = med_spectral_distance + 2*sd_spectral_distance
lower_thres = med_spectral_distance - 2*sd_spectral_distance
#write to output file
sink("./output/spectral_distance_outfile.txt")
cat(upper_thres)
cat(" ")
cat(lower_thres)
for(i in 1:(total_graphs)){
cat("\n")
cat(i)
cat(" ")
cat(paste(spectral_distance[i]))
}
sink()
#png("./plots/entropy.#png")
dev.off()
plot(spectral_distance_x,spectral_distance,type="l",xlab="days", ylab="Spectral distance")
abline(h=upper_thres,col="red",lty=2)
abline(h=lower_thres,col="red",lty=2)
title(main="Spectral distance", col.main="blue")
spectral_distance <- list()
spectral_distance <- spectralDistance()
spectral_distance[is.nan(spectral_distance)] = 0
spectral_distance_x = seq(from = 1, to = (total_graphs), by = 1)
med_spectral_distance = median(spectral_distance)
sd_spectral_distance= sd(spectral_distance)
upper_thres = med_spectral_distance + 2*sd_spectral_distance
lower_thres = med_spectral_distance - 2*sd_spectral_distance
#write to output file
sink("./output/spectral_distance_outfile.txt")
cat(upper_thres)
cat(" ")
cat(lower_thres)
for(i in 1:(total_graphs)){
cat("\n")
cat(i)
cat(" ")
cat(paste(spectral_distance[i]))
}
sink()
#png("./plots/entropy.#png")
dev.off()
plot(spectral_distance_x,spectral_distance,type="l",xlab="days", ylab="Spectral distance")
abline(h=upper_thres,col="red",lty=2)
abline(h=lower_thres,col="red",lty=2)
title(main="Spectral distance", col.main="blue")
spectral_distance = list()
spectral_distance <- spectralDistance()
spectral_distance[is.nan(spectral_distance)] = 0
spectral_distance_x = seq(from = 1, to = (total_graphs), by = 1)
med_spectral_distance = median(spectral_distance)
sd_spectral_distance= sd(spectral_distance)
upper_thres = med_spectral_distance + 2*sd_spectral_distance
lower_thres = med_spectral_distance - 2*sd_spectral_distance
#write to output file
sink("./output/spectral_distance_outfile.txt")
cat(upper_thres)
cat(" ")
cat(lower_thres)
for(i in 1:(total_graphs)){
cat("\n")
cat(i)
cat(" ")
cat(paste(spectral_distance[i]))
}
sink()
#png("./plots/entropy.#png")
dev.off()
plot(spectral_distance_x,spectral_distance,type="l",xlab="days", ylab="Spectral distance")
abline(h=upper_thres,col="red",lty=2)
abline(h=lower_thres,col="red",lty=2)
title(main="Spectral distance", col.main="blue")
fix(spectral_distance)
spectral_distance
spectral_distance[is.nan(spectral_distance)]
spectralDistance<-function()
{
prevGraphEigenValues = c();
currGraphEigenValues = rep(0,5);
distance = list();
k=3;#consider k largest eigen values
for(i in 1:total_graphs)
{
g_laplacian = graph.laplacian(graph[[i]]);
if(nrow(g_laplacian) > 0)#sometimes the graph laplacian is zero length?
{
if(dirname == "enron")
{
eigvalues = eigen(g_laplacian, only.values=TRUE)$values;
currGraphEigenValues = eigvalues[1:k];
}
else
{
func <- function(x, extra=NULL) { as.vector(g_laplacian %*% x) };
currGraphEigenValues = arpack(func, options=list(n=vcount(graph[[i]]), nev=k,
ncv=8, which="LM", maxiter=200))$values
}
if (length(prevGraphEigenValues) == k)#ignore the first one
{
sumdiffsq  = 0;
sumcurrsq = 0;
sumprevsq = 0;
minsq = 0;
for(j in 1:k)
{
sumdiffsq = sumdiffsq + (abs(currGraphEigenValues[j]) - abs(prevGraphEigenValues[j]))^2;
sumcurrsq = sumcurrsq + abs(currGraphEigenValues[j])^2;
sumprevsq = sumprevsq + abs(prevGraphEigenValues[j])^2;
}
minsq = min(sumcurrsq , sumprevsq);
#cat("Minsq: ", minsq);
distance[i] = (sumdiffsq/minsq)^0.5;
#print(distance[i]);
}
prevGraphEigenValues = currGraphEigenValues;
currGraphEigenValues = rep(0,5);
#print(i)
}
}
return(distance)
}
spectral_distance <- spectralDistance()
spectral_distance[is.nan(spectral_distance)] = 0
spectral_distance_x = seq(from = 1, to = (total_graphs), by = 1)
med_spectral_distance = median(spectral_distance)
sd_spectral_distance= sd(spectral_distance)
upper_thres = med_spectral_distance + 2*sd_spectral_distance
lower_thres = med_spectral_distance - 2*sd_spectral_distance
#write to output file
sink("./output/spectral_distance_outfile.txt")
cat(upper_thres)
cat(" ")
cat(lower_thres)
for(i in 1:(total_graphs)){
cat("\n")
cat(i)
cat(" ")
cat(paste(spectral_distance[i]))
}
sink()
#png("./plots/entropy.#png")
dev.off()
plot(spectral_distance_x,spectral_distance,type="l",xlab="days", ylab="Spectral distance")
abline(h=upper_thres,col="red",lty=2)
abline(h=lower_thres,col="red",lty=2)
title(main="Spectral distance", col.main="blue")
fix(spectral_distance)
spectral_distance
spectralDistance<-function()
{
prevGraphEigenValues = c();
currGraphEigenValues = rep(0,5);
distance = rep(0,total_graphs);
k=3;#consider k largest eigen values
for(i in 1:total_graphs)
{
g_laplacian = graph.laplacian(graph[[i]]);
if(nrow(g_laplacian) > 0)#sometimes the graph laplacian is zero length?
{
if(dirname == "enron")
{
eigvalues = eigen(g_laplacian, only.values=TRUE)$values;
currGraphEigenValues = eigvalues[1:k];
}
else
{
func <- function(x, extra=NULL) { as.vector(g_laplacian %*% x) };
currGraphEigenValues = arpack(func, options=list(n=vcount(graph[[i]]), nev=k,
ncv=8, which="LM", maxiter=200))$values
}
if (length(prevGraphEigenValues) == k)#ignore the first one
{
sumdiffsq  = 0;
sumcurrsq = 0;
sumprevsq = 0;
minsq = 0;
for(j in 1:k)
{
sumdiffsq = sumdiffsq + (abs(currGraphEigenValues[j]) - abs(prevGraphEigenValues[j]))^2;
sumcurrsq = sumcurrsq + abs(currGraphEigenValues[j])^2;
sumprevsq = sumprevsq + abs(prevGraphEigenValues[j])^2;
}
minsq = min(sumcurrsq , sumprevsq);
#cat("Minsq: ", minsq);
distance[i] = (sumdiffsq/minsq)^0.5;
#print(distance[i]);
}
prevGraphEigenValues = currGraphEigenValues;
currGraphEigenValues = rep(0,5);
#print(i)
}
}
return(distance)
}
spectral_distance <- spectralDistance()
spectral_distance[!is.na(spectral_distance)]
spectral_distance_x = seq(from = 1, to = (total_graphs), by = 1)
med_spectral_distance = median(spectral_distance)
sd_spectral_distance= sd(spectral_distance)
upper_thres = med_spectral_distance + 2*sd_spectral_distance
lower_thres = med_spectral_distance - 2*sd_spectral_distance
#write to output file
sink("./output/spectral_distance_outfile.txt")
cat(upper_thres)
cat(" ")
cat(lower_thres)
for(i in 1:(total_graphs)){
cat("\n")
cat(i)
cat(" ")
cat(paste(spectral_distance[i]))
}
sink()
#png("./plots/entropy.#png")
dev.off()
plot(spectral_distance_x,spectral_distance,type="l",xlab="days", ylab="Spectral distance")
abline(h=upper_thres,col="red",lty=2)
abline(h=lower_thres,col="red",lty=2)
title(main="Spectral distance", col.main="blue")
fix(spectral_distance)
spectral_distance <- spectralDistance()
spectral_distance[is.na(spectral_distance)] <- 0
spectral_distance_x = seq(from = 1, to = (total_graphs), by = 1)
med_spectral_distance = median(spectral_distance)
sd_spectral_distance= sd(spectral_distance)
upper_thres = med_spectral_distance + 2*sd_spectral_distance
lower_thres = med_spectral_distance - 2*sd_spectral_distance
#write to output file
sink("./output/spectral_distance_outfile.txt")
cat(upper_thres)
cat(" ")
cat(lower_thres)
for(i in 1:(total_graphs)){
cat("\n")
cat(i)
cat(" ")
cat(paste(spectral_distance[i]))
}
sink()
#png("./plots/entropy.#png")
dev.off()
plot(spectral_distance_x,spectral_distance,type="l",xlab="days", ylab="Spectral distance")
abline(h=upper_thres,col="red",lty=2)
abline(h=lower_thres,col="red",lty=2)
title(main="Spectral distance", col.main="blue")
diameterDist <- vector()
for(i in 1:(total_graphs-1))
{
shortestPathsMatrix <- shortest.paths(graph[[i]])
numCols <- ncol(shortestPathsMatrix)
numRows <- nrow(shortestPathsMatrix)
sum<-0
for(k in 1:(numRows))
{
getMax<-max(shortestPathsMatrix[k,])
sum <- sum+getMax
}
shortestPathsMatrix1 <- shortest.paths(graph[[i+1]])
numCols1 <- ncol(shortestPathsMatrix1)
numRows1 <- nrow(shortestPathsMatrix1)
sum1<-0
for(s in 1:(numRows1))
{
getMax1 <- max(shortestPathsMatrix1[s,])
sum1<- sum1+getMax1
}
append(diameterDist,abs(sum-sum1), after=length(diamterDist))
}
diameterDist <- vector()
for(i in 1:(total_graphs-1))
{
shortestPathsMatrix <- shortest.paths(graph[[i]])
numCols <- ncol(shortestPathsMatrix)
numRows <- nrow(shortestPathsMatrix)
sum<-0
for(k in 1:(numRows))
{
getMax<-max(shortestPathsMatrix[k,])
sum <- sum+getMax
}
shortestPathsMatrix1 <- shortest.paths(graph[[i+1]])
numCols1 <- ncol(shortestPathsMatrix1)
numRows1 <- nrow(shortestPathsMatrix1)
sum1<-0
for(s in 1:(numRows1))
{
getMax1 <- max(shortestPathsMatrix1[s,])
sum1<- sum1+getMax1
}
append(diameterDist,abs(sum-sum1), after=length(diamterDist))
}
require(igraph)
args <- commandArgs(trailingOnly = TRUE)
setwd("~/Documents/GraphP2/")
#dirname <- args[1]
dirname <- "p2p-Gnutella"
total_graphs = length(list.files(paste("./",dirname,"/",sep = "")))   #total number of graphs in time series
no_vertices = 0 #total no of vertex in graph
vertex_list = vector("list",total_graphs) #list of vertices in each graph in timeseries
no_edges = list()  #list of total edges in each graph in timeseries
graph = vector("list",total_graphs)    #list of graphs
#create all time series graphs
for(i in 1:total_graphs)
{
filename = paste("./",dirname,"/",i-1,sep = "")
vertex_list[[i]] <- read.table(filename, header=T, quote="\"")
header <- names(vertex_list[[i]])
no_vertices <- as.numeric(substring(header[1],2))
no_edges[i] <- as.numeric(substring(header[2],2))
graph[[i]] <- graph.data.frame(vertex_list[[i]], directed=F)
}
##########################################################################################################################
###########################                     DIAMETER DISTANCE                              #########################
##########################################################################################################################
#calculate diameter distance
diameterDist <- vector()
for(i in 1:(total_graphs-1))
{
shortestPathsMatrix <- shortest.paths(graph[[i]])
numCols <- ncol(shortestPathsMatrix)
numRows <- nrow(shortestPathsMatrix)
sum<-0
for(k in 1:(numRows))
{
getMax<-max(shortestPathsMatrix[k,])
sum <- sum+getMax
}
shortestPathsMatrix1 <- shortest.paths(graph[[i+1]])
numCols1 <- ncol(shortestPathsMatrix1)
numRows1 <- nrow(shortestPathsMatrix1)
sum1<-0
for(s in 1:(numRows1))
{
getMax1 <- max(shortestPathsMatrix1[s,])
sum1<- sum1+getMax1
}
append(diameterDist,abs(sum-sum1), after=length(diamterDist))
}
